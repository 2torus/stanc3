  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math; 
static char* current_statement__;

class eight_schools_ncp_model : public prob_grad {

 private:
  int J;
  std::vector<double> sigma;
  std::vector<double> y;
 
 public:
  ~eight_schools_ncp_model() { }
  
  static std::string model_name() { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // dummy to suppress unused var warning
    try {
      //Read data variables in
      current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
      vals_i__ = context__.vals_i__("J");
      J = vals_i__;
      
      current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
      vals_r__ = context__.vals_r__("sigma");
      sigma = std::vector<double>(J, 0);
      for (size_t i_0__ = 0; i_0__ < sigma.size(); i_0__++)
        sigma[i_0__] = vals_r__;
      
      current_statement__ = "file eight_schools_ncp.stan, line 3, columns 2-12";
      vals_r__ = context__.vals_r__("y");
      y = std::vector<double>(J, 0);
      for (size_t i_0__ = 0; i_0__ < y.size(); i_0__++) y[i_0__] = vals_r__;
      current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
      current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
      greater_or_equal(function__, J, 0);
      current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
      for (size_t sym1__ = 0; sym1__ < length(sigma); sym1__++)
        {
          current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
          current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
          greater_or_equal(function__,
                           stan::model::rvalue(sigma,
                                               stan::model::cons_list(stan::model::index_uni(sym1__),
                                               stan::model::nil_index_list()),
                           "sigma"), 0);
        }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) {
  typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // dummy to suppress unused var warning
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    //TODO: Unpack parameters with reader and constrain
    
    try {
      current_statement__ = "file eight_schools_ncp.stan, line 15, column 2 to line 16, column 41";
      for (size_t j = 1; j < J; j++)
        current_statement__ = "file eight_schools_ncp.stan, line 16, columns 4-41";
        stan::model::rvalue(theta,
                            stan::model::cons_list(stan::model::index_uni(j),
                            stan::model::nil_index_list()), "theta") =
            Plus__(mu,
                   Times__(tau,
                           stan::model::rvalue(theta_tilde,
                                               stan::model::cons_list(stan::model::index_uni(j),
                                               stan::model::nil_index_list()),
                           "theta_tilde")));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside prepare_params") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }//Transformed parameters
    //TODO
    
    try {
      current_statement__ = "file eight_schools_ncp.stan, line 20, columns 2-20";
      lp_accum__.add(normal(mu, 0, 5))
      current_statement__ = "file eight_schools_ncp.stan, line 21, columns 2-21";
      lp_accum__.add(cauchy(tau, 0, 5))
      current_statement__ = "file eight_schools_ncp.stan, line 22, columns 2-29";
      lp_accum__.add(normal(theta_tilde, 0, 1))
      current_statement__ = "file eight_schools_ncp.stan, line 23, columns 2-27";
      lp_accum__.add(normal(y, theta, sigma))
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  void get_param_names(std::vector<std::string>& names) const {
    names.push_back("mu");
    names.push_back("tau");
    names.push_back("theta");
    names.push_back("theta_tilde");
  }
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
  }
  //TODO write_array
  //TODO constrained_param_names
  //TODO unconstrained_param_names
  //TODO transform_inits
}
}
typedef eight_schools_ncp_modelnamespace::eight_schools_ncp_model stan_model;

